"""Basic implementation of a domain metamodel

    TODO:

    * Add feature list metadata support into default metaclasses

    * Review metaclass names and standardize naming convention

    * Ability to define preferred sequence of features (needed for XMI.field
      support, perhaps useful for autogenerated UI's as well?)
"""

from peak.api import *

from interfaces import *
from method_exporter import MethodExporter


__all__ = [
    'Package', 'Model', 'FeatureMC',
    'StructuralFeature', 'Field', 'Collection', 'Reference', 'Sequence',
    'Classifier','PrimitiveType','Enumeration','DataType',
    'DerivedAssociation',
]

















def _XMIMap(self,d,a):

    xm = {}

    for m in binding.getInheritedRegistries(self,'_XMIMap'):
        xm.update(m)

    for k,v in self.__class_descriptors__.iteritems():
        
        for n in getattr(v,'_XMINames',()):

            xm[n] = k

            while '.' in n:
                n = n.split('.',1)[1]
                xm[n]=k

    return xm

_XMIMap = binding.Once(_XMIMap)


class Package(binding.Base):

    """Package of Element Classes"""

    _XMIMap = binding.classAttr(_XMIMap)


class Model(Package):

    """Model or Metamodel containing Packages or Element classes"""









class FeatureMC(MethodExporter):

    """Method-exporting Property
    
        This metaclass adds property support to Meta.MethodExporter by adding
        '__get__', '__set__', and '__delete__' methods, which are delegated
        to the method templates for the 'get', 'set' and 'delattr' verbs.

        In other words, if you define a feature 'foo', following standard
        naming patterns for its 'set', 'get' and 'delattr' verbs, and 'bar' is
        an Element whose class includes the 'foo' feature, then 'bar.foo = 1'
        is equivalent to 'bar.setFoo(1)'.  Similarly, referencing 'bar.foo' by
        itself is equivalent to 'bar.getFoo()', and 'del bar.foo' is equivalent
        to 'bar.delattrFoo()'.

        (Note: this is true even if the Element class supplies its own 'setFoo'
        or 'getFoo' implementations, since the 'getMethod()' API is used.)

        Please see the 'TW.API.Meta.MethodExporter' class documentation for
        more detail on how method templates are defined, the use of naming
        conventions, verbs, template variants, etc."""

    __metaclass__ = binding.Activator   # metaclasses can't be components

    def __get__(self, ob, typ=None):

        """Get the feature's value by delegating to 'ob.getX()'"""

        if ob is None: return self
        return self.getMethod(ob,'get')()


    def __set__(self, ob, val):

        """Set the feature's value by delegating to 'ob.setX()'"""

        return self.getMethod(ob,'set')(val)




    def __delete__(self, ob):

        """Delete the feature's value by delegating to 'ob.delattrX()'"""

        return self.getMethod(ob,'delattr')()


    def typeObject(self,d,a):
        rt = self.referencedType
        if isinstance(rt,str):
            return binding.lookupComponent(rt,self)
        return rt

    typeObject = binding.Once(typeObject)


    fromString = binding.bindTo('typeObject/fromString')
    fromFields = binding.bindTo('typeObject/fromFields')























class StructuralFeature(object):

    __metaclass__ = FeatureMC

    isDerived     = 0
    isRequired    = 0
    lowerBound    = 0
    upperBound    = None    # None means unbounded upper end

    isOrdered     = 0
    isChangeable  = 1       # default is to be changeable

    referencedEnd = None    # and without an 'other end'
    referencedType = None
    defaultValue   = None

    newVerbs = Items(
        get     = 'get%(initCap)s',
        set     = 'set%(initCap)s',
        delattr = 'delattr%(initCap)s',
    )
    
    def get(feature, element):
        return element._getBinding(feature.attrName, feature.defaultValue)


    def set(feature, element, val):
        element._setBinding(feature.attrName,val)

    def delete(feature, element):
        element._delBinding(feature.attrName)

    config.setupObject(delete, verb='delattr')








class Field(StructuralFeature):

    __class_implements__ = IValue    

    upperBound = 1

    def _getList(feature, element):
        return [feature.get(element)]



class DerivedAssociation(StructuralFeature):

    isDerived = 1

    def _getList(feature, element):
        """This must be defined in subclass"""
        raise NotImplementedError
        
    def get(feature, element):
        return feature._getList(element)

    def set(feature, element, val):
        raise TypeError(
            "DerivedAssociation %s cannot be changed" % feature.attrName
        )

    def delete(feature, element):
        raise TypeError(
            "DerivedAssociation %s cannot be changed" % feature.attrName
        )
        









class Collection(StructuralFeature):

    __class_implements__ = ICollection

    newVerbs = Items(
        add     = 'add%(initCap)s',
        remove  = 'remove%(initCap)s',
        replace = 'replace%(initCap)s',
    )

    def _getList(feature, element):
        return element._getBinding(feature.attrName, [])
        
    def get(feature, element):
        return feature._getList(element)

    def set(feature, element, val):
        feature.__delete__(element)
        element._setBinding(feature.attrName, val)

    def add(feature, element, item):

        """Add the item to the collection/relationship"""      

        ub = feature.upperBound

        if not ub or len(feature._getList(element))<ub:
            feature._notifyLink(element,item)
            feature._link(element,item)
        else:
            raise ValueError("Too many items")


    def remove(feature, element, item):
        """Remove the item from the collection/relationship, if present"""
        feature._unlink(element,item)
        feature._notifyUnlink(element,item)




    def replace(feature, element, oldItem, newItem):

        d = feature._getList(element)
        p = d.index(oldItem)

        if p!=-1:
            element._setBinding(feature.attrName, d)
            d[p]=newItem
            feature._notifyUnlink(element,oldItem)
            feature._notifyLink(element,newItem)
        else:
            raise ValueError(oldItem,"not found")


    def delete(feature, element):
        """Unset the value of the feature (like __delattr__)"""

        referencedEnd = feature.referencedEnd

        d = feature._getList(element)

        if referencedEnd:
            
            for item in d:
                otherEnd = getattr(item.__class__,referencedEnd)
                otherEnd._unlink(item,element)

        element._delBinding(feature.attrName)


    config.setupObject(delete, verb='delattr')


    def _notifyLink(feature, element, item):

        referencedEnd = feature.referencedEnd

        if referencedEnd:
            otherEnd = getattr(item.__class__,referencedEnd)
            otherEnd._link(item,element)

    def _notifyUnlink(feature, element, item):

        referencedEnd = feature.referencedEnd

        if referencedEnd:
            otherEnd = getattr(item.__class__,referencedEnd)
            otherEnd._unlink(item,element)


    def _link(feature,element,item):
        d=feature._getList(element)
        element._setBinding(feature.attrName, d)
        d.append(item)
        

    def _unlink(feature,element,item):
        d=feature._getList(element)
        element._setBinding(feature.attrName, d)
        d.remove(item)






















class Reference(Collection):

    __class_implements__ = IReference

    upperBound = 1


    def get(feature, element):
        vals = feature._getList(element)
        if vals: return vals[0]


    def set(feature, element, val):
        feature.__delete__(element)
        feature.getMethod(element,'add')(val)


























class Sequence(Collection):

    __class_implements__ = ISequence

    isOrdered = 1

    newVerbs = Items(
        insertBefore = 'insert%(initCap)sBefore',
    )

    def insertBefore(feature, element, oldItem, newItem):

        d = feature._getList(element)
        
        ub = feature.upperBound
        if ub and len(d)>=ub:
            raise ValueError("Too many items")

        i = -1
        if d: i = d.index(oldItem)

        if i!=-1:
            element._setBinding(feature.attrName, d)
            d.insert(i,newItem)
            feature._notifyLink(element,newItem)
        else:
            raise ValueError(oldItem,"not found")














class Classifier(binding.Base):

    """Basis for all flavors"""

    _XMIMap = binding.classAttr(_XMIMap)
    
    def setParentComponent(self, parentComponent, componentName=None):
        if parentComponent is not None or componentName is not None:
            raise TypeError("Data values are not components")
    
    def getParentComponent(self):
        return None

    def getComponentName(self):
        return None

    def _setBinding(self,attr,value):
        raise TypeError("Immutable object", self)

    def __setattr__(self,attr,value):
        raise TypeError("Immutable object", self)


class PrimitiveType(Classifier):

    """A primitive type (e.g. Boolean, String, etc.)"""

    def fromString(klass, value):
        return value

    fromString = classmethod(fromString)










class Enumeration(Classifier):

    """An enumeration type"""

    def __value_map__(klass,d,a):

        values = {}

        map(values.update,
            binding.getInheritedRegistries(klass,'__value_map__')
        )

        values.update(klass.__dict__.get('__values__',{}))

        for k,v in klass.__dict__.items():
            if not k.startswith('__') or not k.endswith('__'):
                values[k]=v

        return values

    __value_map__ = binding.classAttr(binding.Once(__value_map__))


    def fromString(klass, value):
        if value in klass.__value_map__:
            return klass.__value_map__[value]
        raise ValueError, value

    fromString = classmethod(fromString)












class DataType(Classifier):

    """A complex datatype"""

    def fromString(klass, value):
        return value

    fromString = classmethod(fromString)

    def fromFields(klass, fields):
        raise NotImplementedError

    fromFields = classmethod(fromFields)
























