Fixes and Enhancements since Version 0.5 alpha 1

 - Refactored naming.ParsedURL to be a peak.model.Struct; this means that
   existing ParsedURL subclasses will need to be revised if they used fields
   other than 'scheme' and 'body'.  See PEAK's ParsedURL subclasses for
   examples of the needed changes.  Mainly, '__init__' methods go away,
   'parse' methods change slightly, and explicit field definitions (using
   'model.structField' or similar) are required.

 - Added 'binding.whenAssembled(...)' as syntax sugar for
   'binding.Once(...,activateUponAssembly=True)'.

 - Removed 'LOG_XYZ' convenience functions from 'peak.api', and refactored
   'peak.running.logs' to use a PEP 282-like interface, 'running.ILogger'.
   Under the new scheme, messages must be sent to a specific entry point
   (e.g. 'self.logger.warning("foo")').  Components can bind an attribute
   directly to a logger object, or via configuration properties or utilities.
   PEAK components that do logging all define a 'logger' attribute, bound
   to a configuration property in the 'peak.logs' property namespace.  By
   a default in 'peak.ini', 'peak.logs.*' is configured to output messages
   of 'WARNING' priority or higher to 'sys.stderr'.

   For compatibility with the PEP 282 logging package, a 'logging.logger:'
   URL scheme has been added; looking up the URL '"logging.logger:foo.bar"'
   is equivalent to 'logging.getLogger("foo.bar")', unless the 'logging'
   package is not available, in which case the configuration property
   'peak.logs.foo.bar' will be looked up in the target context of the
   lookup.  Optionally, you can configure the 'logging.logger' URL scheme so
   that it only uses PEAK loggers, and never uses the PEP 282 loggers.

 - Added 'binding.metamethod()' wrapper for metaclass methods that might
   not be accessible from their instances if the instances (classes) also
   defined the method for *their* instances.  You must now use this wrapper
   on any such metaclass-defined methods, as PEAK no longer works around
   this via the 'x.__class__.foo(x,...)' trick that was used previously.
   In particular, if you have metaclass definitions of 'getParentComponent',
   '_getConfigData', 'getComponentName', or 'notifyUponAssembly', you need
   to wrap them with 'binding.metamethod' now.

 - Fixed 'mof2py' generator script not working

 - Fixed model.Element not getting parent component set when passed as a
   constructor argument.

 - Fixed property/utility lookups not working correctly on model.*
   objects.

 - Fixed IndentedStream generating all-whitespace lines

 - Made 'NOT_GIVEN' and 'NOT_FOUND' recognizable by humans (they 'repr'
   and 'str' to their names) and by Python (they can be pickled, and
   when restored they come back as the same object).

